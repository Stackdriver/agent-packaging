#! /bin/bash
#
# stackdriver-agent - start and stop the Stackdriver agent
# http://www.stackdriver.com
#
# Based on collectd.init from Debian package
# Copyright (C) 2005-2006 Florian Forster <octo@verplant.org>
# Copyright (C) 2006-2009 Sebastian Harl <tokkee@debian.org>
#

### BEGIN INIT INFO
# Provides:          stackdriver-agent
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Should-Start:      $network $named $syslog $time cpufrequtils
# Should-Stop:       $network $named $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop Stackdriver Agent
# Description: The Stackdriver Agent is used with the Stackdriver monitoring SaaS service.
### END INIT INFO

. /lib/lsb/init-functions

export PATH=/sbin:/bin:/usr/sbin:/usr/bin

DISABLE=0

DESC="Stackdriver metrics collection agent"
NAME=stackdriver-agent
DAEMON=/opt/stackdriver/collectd/sbin/stackdriver-collectd

CONFIG=/opt/stackdriver/collectd/etc/collectd.conf
_PIDFILE=/var/run/stackdriver-agent.pid

MAXWAIT=30

JAVA_LIB_DIR=""

# Gracefully exit if the package has been removed.
test -x $DAEMON || exit 0

if [ -r /etc/default/${NAME} ]; then
    . /etc/default/${NAME}
fi

if test "$ENABLE_COREFILES" == 1; then
    ulimit -c unlimited
fi

# TODO(dhrupadb): Extract common logic between deb and rpm scripts.
# Attempt to discover the location of the Java libraries.
find_libjvm_so () {
    local java_lib_dir
    local java_home=$(dirname "$(readlink -f "$(bash -lc "which java 2>/dev/null")")")/..
    [ "$java_home" = "./.." ] && return
    local lib_subdirs=("lib/amd64/server" "lib/x64/server" "lib/i386/server")
    local lib_subdirs_with_jre=()
    for subdir in "${lib_subdirs[@]}"; do
        lib_subdirs_with_jre+=("$subdir" "jre/$subdir")
    done
    for libdir in "${lib_subdirs_with_jre[@]/#/$java_home/}"; do
        if [ -f "$libdir/libjvm.so" ]; then
            java_lib_dir="$libdir"
            break
        fi
    done
    echo $java_lib_dir
}

[ -n "$JAVA_LIB_DIR" ] || JAVA_LIB_DIR=$(find_libjvm_so)
if [ -n "$JAVA_LIB_DIR" ]; then
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_LIB_DIR"
fi

gen_hostid() {
    echo "Generating a host id"
    uuidgen > /opt/stackdriver/hostid
    return 0
}

# return:
#   0 if the instance has the necessary credentials.
#   1 if there is a authentication or permissions error.
check_credentials() {
    # Check if the application default credentials file is in the system
    # location.
    if [ ! -f /etc/google/auth/application_default_credentials.json ]; then
        # See if the instance has the correct monitoring scopes.
        INSTANCE_SCOPES=$(curl --silent --connect-timeout 1 -f -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/scopes 2>/dev/null || /bin/true)
        if [ `echo "$INSTANCE_SCOPES" | grep -cE '(monitoring.write|monitoring|cloud-platform)$'` -lt 1 ]; then
            log_failure_msg "The instance has neither the application default" \
              "credentials file nor the correct monitoring scopes; Exiting."
            return 1
        fi
    else
        log_progress_msg "Sufficient authentication scope found to talk to the" \
          "Stackdriver Monitoring API."
    fi
    return 0
}

# return:
#   0 if config is fine
#   1 if there is a syntax error
#   2 if there is no configuration
check_config() {
    if test ! -e "$CONFIG"; then
        return 2
    fi
    if ! $DAEMON -t -C "$CONFIG"; then
        return 1
    fi
    return 0
}

# return:
#   0 if the daemon has been started
#   1 if the daemon was already running
#   2 if the daemon could not be started
#   3 if the daemon was not supposed to be started
d_start() {
    if test "$DISABLE" != 0; then
        # we get here during restart
        log_progress_msg "disabled by /etc/default/$NAME"
        return 3
    fi

    GOOGLE_MONITORING_ENABLE=$(curl --silent --connect-timeout 1 -f -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/attributes/google-monitoring-enable 2>/dev/null)
    if [ -n "$GOOGLE_MONITORING_ENABLE" -a "$GOOGLE_MONITORING_ENABLE" = "0" ]; then
        log_warning_msg "Disabled via metadata"
        return 3
    fi

    # allow setting a proxy
    if [ -n "$PROXY_URL" ]; then
        export https_proxy=$PROXY_URL
    fi

    if ! check_credentials; then
        log_failure_msg "not starting, credentials error"
        return 3
    fi

    if ! check_config; then
        log_failure_msg "not starting, configuration error"
        return 3
    fi

    if test "$USE_COLLECTDMON" == 1; then
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/stackdriver/collectd/lib64:/opt/stackdriver/collectd/lib" start-stop-daemon --start --quiet --oknodo --pidfile "$_PIDFILE" \
            --exec $COLLECTDMON_DAEMON -- -P "$_PIDFILE" -- -C "$CONFIG" \
            || return 2
    else
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/stackdriver/collectd/lib64:/opt/stackdriver/collectd/lib" start-stop-daemon --start --quiet --oknodo --pidfile "$_PIDFILE" \
            --exec $DAEMON -- -C "$CONFIG" -P "$_PIDFILE" \
            || return 2
    fi
    return 0
}

still_running_warning="
WARNING: $NAME might still be running.
In large setups it might take some time to write all pending data to
the disk. You can adjust the waiting time in /etc/default/$NAME."

# return:
#   0 if the daemon has been stopped
#   1 if the daemon was already stopped
#   2 if daemon could not be stopped
d_stop() {
    PID=$( cat "$_PIDFILE" 2> /dev/null ) || true

    start-stop-daemon --stop --quiet --oknodo --pidfile "$_PIDFILE"
    rc="$?"

    if test "$rc" -eq 2; then
        return 2
    fi

    sleep 1
    if test -n "$PID" && kill -0 $PID 2> /dev/null; then
        i=0
        while kill -0 $PID 2> /dev/null; do
            i=$(( $i + 2 ))
            echo -n " ."

            if test $i -gt $MAXWAIT; then
                log_progress_msg "$still_running_warning"
                return 2
            fi

            sleep 2
        done
        return "$rc"
    fi
    return "$rc"
}

case "$1" in
    start)
        log_daemon_msg "Starting $DESC" "$NAME"
        d_start
        case "$?" in
            0|1) log_end_msg 0 ;;
            2) log_end_msg 1 ;;
            3) log_end_msg 255; true ;;
            *) log_end_msg 1 ;;
        esac
        ;;
    stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        d_stop
        case "$?" in
            0|1) log_end_msg 0 ;;
            2) log_end_msg 1 ;;
        esac
        ;;
    status)
        status_of_proc -p "$_PIDFILE" "$DAEMON" "$NAME" && exit 0 || exit $?
        ;;
    restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        check_config
        rc="$?"
        if test "$rc" -eq 1; then
            log_progress_msg "not restarting, configuration error"
            log_end_msg 1
            exit 1
        fi
        d_stop
        rc="$?"
        case "$rc" in
            0|1)
                sleep 1
                d_start
                rc2="$?"
                case "$rc2" in
                    0|1) log_end_msg 0 ;;
                    2) log_end_msg 1 ;;
                    3) log_end_msg 255; true ;;
                    *) log_end_msg 1 ;;
                esac
                ;;
            *)
                log_end_msg 1
                ;;
        esac
        ;;
    genhostid)
        gen_hostid
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|force-reload|status}" >&2
        exit 3
        ;;
esac

# vim: syntax=sh noexpandtab sw=4 ts=4 :
