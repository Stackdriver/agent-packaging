#! /bin/sh
# postinst script for stackdriver-agent
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

case "$1" in
    configure)
        INSTANCE_SCOPES=""
        # first, see if the instance has a monitoring.write scope
        if [ -x /usr/bin/curl ]; then
            INSTANCE_SCOPES=$(curl --silent --connect-timeout 5 -f -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/scopes 2>/dev/null || /bin/true)
        fi
        if [ `echo $INSTANCE_SCOPES | grep -c monitoring.write` -ge 1 ]; then
            # don't need to ask for an api key as we'll try to use instance scopes
            /bin/true
        # second, see if the application default credential file is in the system location
        elif [ -f /etc/google/auth/application_default_credentials.json ]; then
            # don't need to ask for an api key as we'll use application default creds
            /bin/true
        else
            /bin/false
        fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

db_stop

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
