#!/bin/bash
#
# stackdriver-agent    Startup script for the Stackdriver agent
# chkconfig: 2345 86 15
# description: System metrics collection agent for Stackdriver
# processname: stackdriver-collectd
# config: /etc/sysconfig/stackdriver
# config: /opt/stackdriver/collectd/etc/collectd.conf
# pidfile: /var/run/stackdriver-agent.pid

### BEGIN INIT INFO
# Provides: stackdriver-agent
# Required-Start: $local_fs $remote_fs $network $syslog $named
# Required-Stop: $local_fs $remote_fs $network $syslog
# Short-Description: start and stop Stackdriver Agent
# Description: The Stackdriver Agent is used with the Stackdriver monitoring SaaS service.
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
### END INIT INFO

# Source function library.
. /etc/init.d/functions

RETVAL=0
ARGS=""
prog="stackdriver-collectd"
pidfile=/var/run/stackdriver-agent.pid
CONFIG=/etc/stackdriver/collectd.conf
DAEMON=/opt/stackdriver/collectd/sbin/stackdriver-collectd

JAVA_LIB_DIR=""

if [ -r /etc/default/$prog ]; then
    . /etc/default/$prog
fi
if [ -r /etc/sysconfig/stackdriver ]; then
    . /etc/sysconfig/stackdriver
fi

# Attempt to discover the location of the Java libraries.
find_libjvm_so () {
    local java_lib_dir
    local java_home=$(dirname "$(readlink -f "$(bash -lc "which java 2>/dev/null")")")/..
    [ "$java_home" = "./.." ] && return
    local lib_subdirs=("lib/amd64/server" "lib/x64/server" "lib/i386/server")
    local lib_subdirs_with_jre=()
    for subdir in "${lib_subdirs[@]}"; do
        lib_subdirs_with_jre+=("$subdir" "jre/$subdir")
    done
    for libdir in "${lib_subdirs_with_jre[@]/#/$java_home/}"; do
        if [ -f "$libdir/libjvm.so" ]; then
            java_lib_dir="$libdir"
            break
        fi
    done
    echo $java_lib_dir
}

[ -n "$JAVA_LIB_DIR" ] || JAVA_LIB_DIR=$(find_libjvm_so)
if [ -n "$JAVA_LIB_DIR" ]; then
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_LIB_DIR"
fi

gen_hostid() {
    echo "Generating a host id"
    uuidgen > /opt/stackdriver/hostid
    return 0
}

# return:
#   0 if config is fine
#   1 if there is a syntax error
#   2 if there is no configuration
#   3 if the instance doesn't have the necessary credentials
check_config() {
    if test ! -e "$CONFIG"; then
        return 2
    fi
    if ! $DAEMON -t -C "$CONFIG"; then
        return 1
    fi
    # Check if the application default credentials file is in the system
    # location.
    if [ ! -f "${GOOGLE_APPLICATION_CREDENTIALS:-/etc/google/auth/application_default_credentials.json}" ]; then
        # See if the instance has the correct monitoring scopes.
        INSTANCE_SCOPES=$(curl --silent --connect-timeout 1 -f -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/scopes 2>/dev/null || /bin/true)
        if [ `echo "$INSTANCE_SCOPES" | grep -cE '(monitoring.write|monitoring|cloud-platform)$'` -lt 1 ]; then
            echo >&2 "The instance has neither the application default" \
              "credentials file nor the correct monitoring scopes; Exiting."
            return 3
        fi
    else
        echo "Sufficient authentication scope found to talk to the" \
          "Stackdriver Monitoring API."
    fi
    return 0
}

start () {
    echo -n $"Starting $prog: "

    GOOGLE_MONITORING_ENABLE=$(curl --silent --connect-timeout 1 -f -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/attributes/google-monitoring-enable 2>/dev/null)
    if [ -n "$GOOGLE_MONITORING_ENABLE" -a "$GOOGLE_MONITORING_ENABLE" = "0" ]; then
        echo "Disabled via metadata"
        return 0
    fi

    # allow setting a proxy
    if [ -n "$PROXY_URL" ]; then
        export https_proxy=$PROXY_URL
    fi

    if ! check_config; then
        echo >&2 "Not starting, configuration/credentials error."
        return 1
    fi

    if [ -r "$CONFIG" ]; then
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/stackdriver/collectd/lib64:/opt/stackdriver/collectd/lib" daemon /opt/stackdriver/collectd/sbin/stackdriver-collectd -C "$CONFIG" -P "$pidfile"
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/$prog
    else
        echo "Can't read agent configuration file: $CONFIG"
        RETVAL=1
    fi
    return $RETVAL
}

stop () {
    echo -n $"Stopping $prog: "
    killproc $prog
    RETVAL=$?
    echo

    [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/$prog
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status -p $pidfile $prog
    ;;
  restart|reload)
    stop
    start
    ;;
  condrestart)
    [ -f /var/lock/subsys/$prog ] && stop && start || :
    ;;
  genhostid)
    gen_hostid
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|reload|condrestart|genhostid}"
    exit 1
esac

exit $?

# vim:syntax=sh
