#!/bin/bash
#
# stackdriver-agent    Startup script for the Stackdriver agent
# chkconfig: 2345 86 15
# description: System metrics collection agent for Stackdriver
# processname: stackdriver-collectd
# config: /etc/sysconfig/stackdriver
# config: /opt/stackdriver/collectd/etc/collectd.conf
# pidfile: /var/run/stackdriver-agent.pid

### BEGIN INIT INFO
# Provides: stackdriver-agent
# Required-Start: $local_fs $remote_fs $network $syslog $named
# Required-Stop: $local_fs $remote_fs $network $syslog
# Short-Description: start and stop Stackdriver Agent
# Description: The Stackdriver Agent is used with the Stackdriver monitoring SaaS service.
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
### END INIT INFO

# Source function library.
. /etc/init.d/functions

RETVAL=0
ARGS=""
prog="stackdriver-collectd"
pidfile=/var/run/stackdriver-agent.pid
CONFIG=/opt/stackdriver/collectd/etc/collectd.conf
CONFIG_TEMPLATE=/opt/stackdriver/collectd/etc/collectd.conf.tmpl

JAVA_LIB_DIR=""

if [ -r /etc/default/$prog ]; then
    . /etc/default/$prog
fi
if [ -r /etc/sysconfig/stackdriver ]; then
    . /etc/sysconfig/stackdriver
fi

# Attempt to discover the location of the Java libraries.
find_libjvm_so () {
    local java_lib_dir
    local java_home=$(dirname "$(readlink -f "$(bash -lc "which java 2>/dev/null")")")/..
    [ "$java_home" = "./.." ] && return
    local lib_subdirs=("lib/amd64/server" "lib/x64/server" "lib/i386/server")
    local lib_subdirs_with_jre=()
    for subdir in "${lib_subdirs[@]}"; do
        lib_subdirs_with_jre+=("$subdir" "jre/$subdir")
    done
    for libdir in "${lib_subdirs_with_jre[@]/#/$java_home/}"; do
        if [ -f "$libdir/libjvm.so" ]; then
            java_lib_dir="$libdir"
            break
        fi
    done
    echo $java_lib_dir
}

[ -n "$JAVA_LIB_DIR" ] || JAVA_LIB_DIR=$(find_libjvm_so)
if [ -n "$JAVA_LIB_DIR" ]; then
    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_LIB_DIR"
fi

get_instance_id () {
    local iid

    # allow override of instance id in sysconfig file
    if [ -n "$INSTANCE_ID" ]; then
        iid=$INSTANCE_ID
    elif [ -r /opt/stackdriver/hostid ]; then
        iid=$(cat /opt/stackdriver/hostid)
    # RS: Check Rackspace first because we can fail quickly.
    elif [[ -x /usr/bin/xenstore-read && $(/usr/bin/xenstore-read vm-data/provider_data/provider) = "Rackspace" ]]; then
        iid=$(/usr/bin/xenstore-read name |sed -e 's/^instance-//')
    elif [ -z "$SKIP_METADATA_CHECKS" ]; then
        # AWS: If we're on EC2, this ought to return the instance id.
        iid=$(curl --silent --connect-timeout 1 -f http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null)
        if [ -z "$iid" ]; then
            # that failed.  let's try to see if it looks like we're on GCE
            iid=$(curl --silent --connect-timeout 1 -f -H 'Metadata-Flavor: Google' http://169.254.169.254/computeMetadata/v1/instance/id 2>/dev/null)
        fi
    elif [ -r /sys/hypervisor/uuid -a $(cat /sys/hypervisor/version/extra |grep -c amazon) -eq 0 ]; then
        iid=$(cat /sys/hypervisor/uuid)
    else
        echo 'Unable to discover an id for this machine!' >&2
    fi

    echo $iid
}

get_collectd_endpoint () {
    for endpoint in collectd-gateway.google.stackdriver.com collectd-gateway.stackdriver.com; do
        if [[ "200" = $(curl --silent -f -s -w "%{http_code}" --retry 1 -o /dev/null https://${endpoint}/v1/agent-test?stackdriver-apikey=${STACKDRIVER_API_KEY} 2>/dev/null) ]]; then
            echo $endpoint
            return
        fi
    done
    echo 'Unable to determine collectd endpoint!' >&2
    return 1
}

gen_hostid() {
    echo "Generating a host id"
    uuidgen > /opt/stackdriver/hostid
    return 0
}

gen_config() {
    if [ "$AUTOGENERATE_COLLECTD_CONFIG" = "no" ]; then
        return
    fi

    AUTOGENERATE_HEADER="# NOTE: This file is auto-generated and will be overwritten unless you set
#     AUTOGENERATE_COLLECTD_CONFIG=\"no\"
# in /etc/sysconfig/stackdriver
"
    local IID=$(get_instance_id)
    if [ -z "$IID" ]; then
        echo "Unable to discover instance id" >&2
    return 1
    fi
    echo "$AUTOGENERATE_HEADER" > $CONFIG
    echo "Hostname \"$IID\"" >> $CONFIG
    cat $CONFIG_TEMPLATE >> $CONFIG
    return
}

start () {
    echo -n $"Starting $prog: "

    GOOGLE_MONITORING_ENABLE=$(curl --silent --connect-timeout 1 -f -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/attributes/google-monitoring-enable 2>/dev/null)
    if [ -n "$GOOGLE_MONITORING_ENABLE" -a "$GOOGLE_MONITORING_ENABLE" = "0" ]; then
        echo "Disabled via metadata"
        return 0
    fi

    # allow setting a proxy
    if [ -n "$PROXY_URL" ]; then
        export https_proxy=$PROXY_URL
    fi

    if ! gen_config; then
        echo "Not starting. Configuration error!" >&2
        return 1
    fi

    if [ -r "$CONFIG" ]; then
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/stackdriver/collectd/lib64:/opt/stackdriver/collectd/lib" daemon /opt/stackdriver/collectd/sbin/stackdriver-collectd -C "$CONFIG" -P "$pidfile"
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/$prog
    else
        echo "Can't read agent configuration file: $CONFIG"
        RETVAL=1
    fi
    return $RETVAL
}

stop () {
    echo -n $"Stopping $prog: "
    killproc $prog
    RETVAL=$?
    echo

    [ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/$prog
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status -p $pidfile $prog
    ;;
  restart|reload)
    stop
    start
    ;;
  condrestart)
    [ -f /var/lock/subsys/$prog ] && stop && start || :
    ;;
  genhostid)
    gen_hostid
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|reload|condrestart|genhostid}"
    exit 1
esac

exit $?

# vim:syntax=sh
